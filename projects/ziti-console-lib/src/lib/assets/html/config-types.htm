    <!-- General Page Layout HTML -->  
    <div class="header">
        <div class="title">
            <span data-i18n="Manage"></span>
            <span data-i18n="ConfigTypes"></span>
        </div>
        <div class="bread">
            <span data-i18n="ZitiNetwork"></span>
            <span class="secondary">/</span>
            <span data-i18n="Manage"></span>
            <span data-i18n="ConfigTypes"></span>
        </div>
        {{html.line}}
        {{html.tabServices}}
    </div>
    {{html.add}}
    {{html.search}}
    <div class="area data" data-defined="table">
        {{html.noitems}}
        <div class="table">
            <div class="head grid four">
                <div class="col">
                    <div class="selector all"></div>
                </div>
                <div class="col sort asc" data-by="name">
                    <span data-i18n="Name"></span>
                    <div class="dragger"></div>
                </div>
                <div class="col desktop sort" data-by="createdAt">
                    <span data-i18n="Created"></span>
                </div>
                <div class="col"></div>
            </div>
            <div class="rows" data-defined="rows">
                <!-- This area will be replaced by data rows -->
            </div>
        </div>
    </div>
    <div class="nodata" data-defined="empty">
        <span data-i18n="No"></span>
        <span data-i18n="ConfigType"></span>
        <span data-i18n="NoneDefined"></span>
        <span data-i18n="ConfigType"></span>.
    </div>

    <!-- Template HTML will be used to display rows of data -->
    <div id="RowTemplate" class="row grid four template" data-defined="template">
        <div class="col">
            <div class="selector" data-id="{{id}}"></div>
        </div>
        <div class="col" data-id="{{id}}"><a href="javascript:page.edit('{{id}}');">{{name}}</a></div>
        <div class="col desktop" data-id="{{id}}">{{moment.createdAt}}</div>
        <div class="col allowOver">
            <div class="dots" data-id="{{id}}">...
                <div class="gridMenu" data-id="{{id}}">
                    <div class="gridAction" data-id="{{id}}" data-action="edit" data-i18n="Edit"></div>
                    <div class="gridAction" data-id="{{id}}" data-action="delete" data-i18n="Delete"></div>
                </div>
            </div>
        </div>
    </div>

	<!-- Modification Modals -->
    <div id="AddModal" class="modal box full">
        <div class="sized">
            <div class="close icon-close"></div>
            <div class="title adding">
                <span data-i18n="Create"></span>
                <span data-i18n="ConfigType"></span>
            </div>
            <div class="subtitle adding">
                <span data-i18n="AddNew"></span>
                <span data-i18n="ConfigType"></span>
                <span data-i18n="ByComplete"></span>
            </div>
            <div class="title editing">
                <span data-i18n="Edit"></span>
                <span data-i18n="ConfigType"></span>
            </div>
            <div class="subtitle editing">
                <span data-i18n="Change"></span>
                <span data-i18n="ConfigType"></span>
                <span data-i18n="Details"></span>
            </div>
            <label for="Name" data-i18n="Name"></label>
            <input id="Name" data-bind="data.name" type="text" maxlength="500" data-i18n="EnterName" data-restrict="empty" />
            <label for="Schema" data-i18n="Schema"></label>
            <textarea id="Schema"></textarea>
            <div>
            <div id="TagArea"></div>
            {{html.api}}
            {{html.save}}
        </div>
	</div>
    
    
    <script language="javascript" type="text/javascript">
        page = {
            filterObject: null,
            schema: null,
            apiParams: null,
            init: function() {
                page.filterObject = new Data("config-types");
                page.filterObject.init(true, true);
                page.apiParams = CodeMirror.fromTextArea(document.getElementById("ApiParams"), { mode: "application/json", lineNumbers: true, extraKeys: {"Ctrl-Space": "autocomplete"}, readOnly: true });
                page.schema = CodeMirror.fromTextArea(document.getElementById("Schema"), { mode: "application/json", lineNumbers: true, extraKeys: {"Ctrl-Space": "autocomplete"} });
                page.schema.on('change', (args) => { 
                    page.params(); 
                });
            }, 
            gridAction: function(e) {
                var action = $(e.currentTarget).data("action");
                var id = $(e.currentTarget).data("id");
                if (action=="delete") page.filterObject.delete([id]);
                else if (action=="edit") page.edit(id);
            },
            edit: function(id) {
                var detail = page.filterObject.details(id);
                page.schema.setValue(JSON.stringify(detail.schema));
                page.schema.autoFormatRange({line:0, ch:0}, {line:page.schema.lineCount()});
                page.params();
                modal.show("AddModal");
            },
            save: function() {
                if (page.validate()) {
                    var obj = page.params();
                    page.filterObject.save(obj);
                } else growler.form();
            },
            formReset: function(e) {
                page.schema.setValue(JSON.stringify({}));
                page.params();
            },
            params: function() {
                try {
                    var obj = {
                        name: $("#Name").val(),
                        schema: JSON.parse(page.schema.getValue())
                    };

                    var url = settings.versionData.baseUrl+settings.versionData.serviceUrl+"/"+page.filterObject.name;
                    if (page.filterObject.isEditing()) url += "/"+page.filterObject.editId;
                    $("#ApiUrl").val(url);  
                    var stayAt = $("#AddModal").scrollTop();
                    page.apiParams.setValue(JSON.stringify(obj));
                    page.apiParams.autoFormatRange({line:0, ch:0}, {line:page.apiParams.lineCount()});
                    page.apiParams.scrollTo(null, 0);
                    $("#AddModal").scrollTop(stayAt);
                } catch (e) {
                    console.log(e);
                }
            },
            validate: function() {
                $(".errors").removeClass("errors");
                if ($("#Name").val().trim().length==0) $("#Name").addClass("errors");
                return $(".errors").length==0;
            },
            reset: function() {
                app.isDirty = false;
                page.params();
            }
        }
    </script>